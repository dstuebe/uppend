buildscript {
    repositories {
//        jcenter()
//        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    }
}

plugins {
    id 'com.palantir.git-version' version '0.9.1'
    id 'nebula.lint' version '8.3.1'
}

import org.apache.tools.ant.filters.ExpandProperties
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

if (new File('.git').exists() && (exec {
    commandLine "sh", "-c", "git --version"
    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()
    ignoreExitValue true
}).exitValue == 0) {
    version gitVersion()
} else {
    version "unspecified"
}

group 'com.upserve'
description = """Uppend: fast, append-only key-multivalue store"""

// TODO unused-dependency is broken - claims all dependencies are unused!
//gradleLint.rules += 'unused-dependency'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'com.bmuschko.nexus'
apply plugin: 'c'

jacoco {
    toolVersion = "0.8.2" // Fixed to resolve issue with JDK 11 in Gradle 4.X.Y
}

def SYS_INCLUDE_DIR = "/usr/include" // this.properties['system.include.dir']
def SYS_LOCAL_INCLUDE_DIR = '/usr/local/include' // this.properties['system.local.include.dir']
def JNI_INCLUDE_DIR = "${System.properties['java.home']}/include"
def JNI_LIB_DIR = "${System.properties['java.home']}/lib"

println "Using system include directory: " + SYS_INCLUDE_DIR
println "Using system local include directory: " + SYS_LOCAL_INCLUDE_DIR
println "Using JNI include directory: " + JNI_INCLUDE_DIR
println "Using JNI lib directory: " + JNI_LIB_DIR

model {
    platforms {
        x64 {
            architecture "x86_64"
        }
    }

    components {
        nativeIO(NativeLibrarySpec) {
            targetPlatform "x64"
            // Using default path for source and headers
        }
    }

    toolChains {
        gcc(Gcc) {
            eachPlatform {
                if (System.properties['os.name'].equals('Mac OS X')) {
                    cCompiler.withArguments { args ->
                        args << "-O2"
                        args << "-I" + SYS_INCLUDE_DIR
                        args << "-I" + SYS_LOCAL_INCLUDE_DIR
                        args << "-I" + JNI_INCLUDE_DIR
                        args << "-I" + JNI_INCLUDE_DIR + "/darwin"
                    }
                    linker.withArguments { args ->
                        args << "-O2"
                    }
                } else {
                    cCompiler.withArguments { args ->
                        args << "-O2"
                        args << "-I" + SYS_INCLUDE_DIR
                        args << "-I" + SYS_LOCAL_INCLUDE_DIR
                        args << "-I" + JNI_INCLUDE_DIR
                        args << "-I" + JNI_INCLUDE_DIR + "/linux"
                    }
                    linker.withArguments { args ->
                        args << "-O2"
                    }
                }
            }
        }
        clang(Clang) {
            eachPlatform {
                if (System.properties['os.name'].equals('Mac OS X')) {
                    cCompiler.withArguments { args ->
                        args << "-O2"
                        args << "-I" + SYS_INCLUDE_DIR
                        args << "-I" + SYS_LOCAL_INCLUDE_DIR
                        args << "-I" + JNI_INCLUDE_DIR
                        args << "-I" + JNI_INCLUDE_DIR + "/darwin"
                    }
                    linker.withArguments { args ->
                        args << "-O2"
                    }
                } else {
                    cCompiler.withArguments { args ->
                        args << "-O2"
                        args << "-I" + SYS_INCLUDE_DIR
                        args << "-I" + SYS_LOCAL_INCLUDE_DIR
                        args << "-I" + JNI_INCLUDE_DIR
                        args << "-I" + JNI_INCLUDE_DIR + "/linux"
                    }
                    linker.withArguments { args ->
                        args << "-O2"
                    }
                }
            }
        }
    }
}

sourceCompatibility = 1.9
targetCompatibility = 1.9
// Requires 1.9 or greater due to unsafe memory access in MappebByteBuffer - Oracle Incident Report 9119653

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.google.guava:guava:21.0'
    compile 'info.picocli:picocli:4.0.1'
    compile 'io.dropwizard.metrics:metrics-core:3.2.3'
    compile 'it.unimi.dsi:fastutil:7.0.13'
//    compile 'me.lemire.integercompression:JavaFastPFOR:0.1.11'
    compile 'org.slf4j:slf4j-api:1.7.22'

    testCompile 'junit:junit:4.12'
    testCompile 'org.apache.logging.log4j:log4j-api:2.8'
    testCompile 'org.mockito:mockito-core:2.18.3'
}

tasks.withType(JavaCompile) {

    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Werror" << "-h" << ("${buildDir}/../src/nativeIO/headers/" as String)
    //options.verbose = true
}

sourceSets {
    main {
        output.resourcesDir = "${buildDir}/classes/main"
    }
    test {
        output.resourcesDir = "${buildDir}/classes/test"
    }
}

ant.property(name: 'gradle_build_version', value: version)

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.properties'
        filter(ExpandProperties, project: ant.antProject)
    }
}

// TODO include the cross compiled nativeIO libs as a resource. Unpack and load from jar!
task fatJar(type: Jar) {
    dependsOn 'assembleDependentsNativeIO'

    dependencies {
        compile 'org.apache.logging.log4j:log4j-core:2.8'
        compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.8'
    }
    manifest {
        attributes 'Main-Class': 'com.upserve.uppend.Uppend'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

tasks.withType(Test) {
    dependsOn 'assembleDependentsNativeIO'
    systemProperty "java.library.path", "${buildDir}/libs/nativeIO/shared/"
    maxHeapSize = "2048m"

    // From https://stackoverflow.com/a/36130467/2136991
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {

            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport

modifyPom {
    project {
        name 'Uppend'
        description 'Uppend is an append-only, key-multivalue store.'
        url 'https://github.com/upserve/uppend'
        inceptionYear '2017'

        scm {
            url 'https://github.com/upserve/uppend'
            connection 'scm:https://upserve@github.com/upserve/uppend.git'
            developerConnection 'scm:git://github.com/upserve/uppend.git'
        }

        licenses {
            license {
                name 'The MIT License'
                url 'https://opensource.org/licenses/MIT'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'bfulton'
                name 'Bright Fulton'
                url 'https://github.com/bfulton'
            }
            developer {
                id 'dstuebe'
                name 'David Stuebe'
                url 'https://github.com/dstuebe'
            }
            developer {
                id 'jazzdan'
                name 'Dan Miller'
                url 'https://github.com/jazzdan'
            }
            developer {
                id 'kbarrette'
                name 'Keith Barrette'
                url 'https://github.com/kbarrette'
            }
        }
    }
}
